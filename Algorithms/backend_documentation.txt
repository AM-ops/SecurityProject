================
Cipher Background
================
Transposition:
A transposition cipher is a means of encryption by which the plaintext characters are shifted according to a regular system. As such, the order of the plaintext is simply reordered. There are also several different methods of doing this, such as the Columnar Transposition which reads the columns in order of the key's character values (i.e. a=1, b=2,...). Others involve some form of distortion by adding some spaces or other characters to further mix up the plain text. 

Vigenere:
This cipher was first described by Giovan Bellaso in 1553 but later misattributed to Blaise de Vigenere, hence its name. This cipher works by making use of a series of interwoven Caesar ciphers - which when joined create a Vigenere Table - based on the letters of a given keyword. As such, it is a polyalphabetic substitution cipher. It was still "indecipherable" almost three centuries after its' development.

Vernam:
The Vernam cipher is a One-Time pad cipher meaning that the key used is only ever used once and never again. It makes use of the positional values of each letter in the alphabet and adds the plaintext to the key with these and then applies a modulo 26 calculation on the resulting values. The key used in this has certain stipulations, the first that it must be truly random (one that computers are somewhat able to do), it must also be as long as the given plain text and then ever be used again.
================
Documentation
================
File Handling Methods
fileToByteString()
This method takes in a file/file path and reads it in binary mode. This data is then converted to a bytes array such that it can be worked on by other functions.

byteStringToFile()
This function takes in an bytes array of decimal values  and writes them to the file/file path provided.

Transposition Ciphers Methods
Text Functions
keyCheck(key)
This function takes the provided key and checks if it is a integer or string and if a string returns the length of it to use as a key.

StrToMatrix_TEXT()
This function takes in a text string and a numerical key. The key is used to stipulate the number of desired columns in the matrix. The function then rearranges the string into the matrix and accordingly returns it. It also pads the last row if required.

Transposition_TEXT_Encryption()
This function takes in a string and a numerical key and passes them to StrToMatrix_TEXT(). This function then applies a simple transposition cipher by reading the data from the matrix column wise.

Transposition_TEXT_Decryption()
This function takes in a string and a numerical key. The function then uses various mathematical principles to work out how to read the encrypted text back; it does this by essentially transposing the matrix again. As such, it compiles a matrix to accomplish this and then returns a string through the .join() function.

File Functions
StrToMatrix_FILE()
Works similar to StrToMatrix_TEXT() with the exception of what is used as padding - a null byte transformed into an integer value; i.e. ord("\u0000").

Transposition_FILE_Encryption()
Works similar to Transposition_TEXT_Encryption() with the exception of returning a numerical array instead of a string as well as taking in a byte array in place of a string.

Transposition_FILE_Decryption()
Works similar to Transposition_TEXT_Decryption() with the exception of returning a numerical array instead of a string and removing the added padding as well as taking in a byte array in place of a string.

Vigenere Cipher
extendKeyLength()
This function takes the length of the string given and the key to be used and ensures the key matches the length and if not duplicates it until it does. There is no need for a shortening function due to how the Vigenere Algorithm uses.

Text Functions
Vigenere_TEXT_Encryption()
This function takes in a string and a key. It then converts the plaintext to uppercase letters. Instead of making use of a Vigenere Table - this function makes use of the numerical ASCII values of characters and adds them in modulo 26. It then adds the value of 65, or ord('A') to get all character values back to the range of letters and returns these as a string. It also includes a check to ignore any non-letter based characters as a Vigenere table is only alphabet letters.

Vigenere_TEXT_Decryption()
Works similar to the encryption but instead subtracts the values before adding 65.

File Functions
Vigenere_FILE_Encryption()
Works as with Vigenere_TEXT_Encryption() but is applied within modulo 256 to encompass all possible characters as well as taking in a byte array in place of a string.

Vigenere_FILE_Decryption()
Works as with Vigenere_TEXT_Decryption() but is applied within modulo 256 to encompass all possible characters as well as taking in a byte array in place of a string.

The method of adding and subtracting numerical ASCII values has been found by us to consistently produce the same results as using a Vigenere table and as such was used as it would decrease look-up and computational time - especially on larger files.

Vernam Ciphers
Text Functions
vernam_Key_Generator()
This function takes in the length of a message/string and produces a random string of characters (within the capital letter set) to be used in the encryption functions.

Vernam_TEXT_Encryption()
This function takes in a message/string to be encrypted and calls vernam_Key_Generator() to create a unique one-time key. The ascii values of the message and key are added within modulo 26. The function then adds the required value to have the characters to be letter characters again and returns this as a string. Due to the random key generation, the key is stored as part of the resulting encrypted text.

Vernam_TEXT_Decryption()
This function begins by separating the key from the encrypted text and then subtracts the values in modulo26, takes these values back to the range of letter characters and returns this as a string.

File functions
vernam_Key_Generator_FILE()
This function works similar to vernam_Key_Generator() except it generates an array of numerical values (between 0 and 255) as a key.

Vernam_FILE_Encryption()
Works like Vernam_TEXT_Encryption() except it takes in a numerical array of byte values and is done within modulo256.

Vernam_FILE_Decryption()
Works like Vernam_TEXT_Decryption() except it takes in a numerical array of byte values and is done within modulo256.

Our Own algorithm
Text methods
own_TEXT_Encryption()
This function takes in a plaintext string and well as a integer key. The individual characters of the string are subjected to a mathematical caluclation based on the provided key and added to an array. Afterwards, a randomly generated key of the same length is created consisting of values from 0 to 255 to be added to the array as well before being added to the array as well. A string result of these is then returned.

own_TEXT_Decryption()
This function takes in a ciphertext string and a key. The cipher text is split into the encrypted text and a random key used in its' generation. The encrypted text is convered to numerical ascii values and have the random-key's values subtracted from it before having the inverse of a mathematical calculation based on the value of the key argument. This result is then concatenated and returned.

own_FILE_Encryption()
Works very similar to own_TEXT_Encryption() except is takes in a byte array in place of a string and the values of the mathematical calculations are done in modulo256 to stay within the 0-255 byte limitations.

own_FILE_Decryption()
Works very similar to own_TEXT_Decryption() except is takes in a byte array in place of a string and the values of the mathematical calculations are done in modulo256 to stay within the 0-255 byte limitations.


===============
Software/Platforms
===============
-Atom IDE
-CommandPromt Terminal
-Coding done using python 3


============
sources used
============
https://docs.python.org/3/library/math.html
https://docs.python.org/3/library/random.html
https://docs.python.org/3/c-api/list.html
https://docs.python.org/3/tutorial/inputoutput.html

=============
Reflection
=============
While developing the Vigenere and Vernam algorithms, it was very interesting how similar they are to each other in their encryption and decryption methods digitally as, through our implementation, both made use of the ASCII values of characters.

While Python has great success when handling text-based files (.txt, .csv, etc.) it was not as effective when it came to other formats such as .png and .mp3 and as such imposed certain restrictions on how our algorithms could function - the most notable being that we could not alter the data type of the contents of a file to anything other than in integer byte value as it would seem that the encoding used on these is not one of the common ones like UTF-8 or UTF-32 and as such forced us to implement two "modes" for each algorithm - one for text and one for any file (.txt included)

There was also an instance when testing the Vernam cipher against a .png file where the encrypted file was actually not "corrupted" (as all bytes in a file are used this included file-type specifications) and appeared as an image of a few white stripes (nothing like the original). This is interesting as the OTP generated in that instance must have had a sequence that allowed the file-type specification to still be readable and as such the file could be opened. This does pose an interesting question that if a key could be generated with certain values, could the encrypted file or text mirror the original due to the modulo calculations? While our Vernam implementation shouldn't lead to this as the OTP is diffused within the encrypted contents - it could happen with the Vigenere Cipher as the user must stipulate the key both times and it is not stored. It is very very highly unlikely to happen on file encryption due to the sheer amount of data that this would need to happen to, but for the text encryption, it could (although still very unlikely).